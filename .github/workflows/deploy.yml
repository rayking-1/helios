name: Deploy Helios Adaptive Planner

on:
  push:
    branches:
      - main  # 当推送到main分支时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-prod.txt
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'helios-frontend/package-lock.json'
      
      - name: Install frontend dependencies
        run: |
          cd helios-frontend
          npm ci
      
      - name: Run backend tests
        run: |
          pytest helios
      
      - name: Run frontend tests
        run: |
          cd helios-frontend
          npm test
      
      - name: Build frontend
        run: |
          cd helios-frontend
          npm run build
      
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: helios-frontend/dist/

  deploy-backend:
    name: Deploy Backend
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/helios-backend:latest,${{ secrets.DOCKER_HUB_USERNAME }}/helios-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ENVIRONMENT=production
      
      # 部署到服务器/Kubernetes/云平台（根据实际情况选择）
      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /opt/helios
            docker-compose pull backend
            docker-compose up -d backend

  deploy-frontend:
    name: Deploy Frontend
    needs: build-and-test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: helios-frontend/dist
      
      # 部署到Vercel（推荐方式）
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./helios-frontend/dist
      
      # 或者部署到其他静态托管服务（例如Netlify）
      # - name: Deploy to Netlify
      #   uses: nwtgck/actions-netlify@v2
      #   with:
      #     publish-dir: './helios-frontend/dist'
      #     production-branch: main
      #     deploy-message: "Deploy from GitHub Actions"
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  healthcheck:
    name: Health Check
    needs: [deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Check backend health
        uses: jtalk/url-health-check-action@v3
        with:
          url: https://api.yourdomain.com/health
          max-attempts: 5
          retry-delay: 15s
      
      - name: Check frontend availability
        uses: jtalk/url-health-check-action@v3
        with:
          url: https://app.yourdomain.com
          max-attempts: 3
          retry-delay: 10s
      
      - name: Send notification
        if: success() || failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_TITLE: Deployment Status
          SLACK_MESSAGE: 'Deployment ${{ job.status }}' 
        